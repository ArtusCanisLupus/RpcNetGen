
//----------------------------------------------------
// The following code was generated by C# CUP v0.1
// 04.01.2019 12:42:46
//----------------------------------------------------

namespace RpcNetGen
{

using System;
using System.Text;
using System.Collections;
using TUVienna.CS_CUP.Runtime;

/** C# CUP v0.1 generated parser.
  * @version 04.01.2019 12:42:46
  */
public class Parser : TUVienna.CS_CUP.Runtime.lr_parser {

  /** Default constructor. */
  public Parser():base() {;}

  /** Constructor which sets the default scanner. */
  public Parser(TUVienna.CS_CUP.Runtime.Scanner s): base(s) {;}

  /** Production table. */
  protected static readonly short[][] _production_table = 
    unpackFromStrings(new string[] {
    "/000/134/000/002/002/004/000/002/003/004/000/002/021" +
    "/002/000/002/021/003/000/002/020/003/000/002/020/004" +
    "/000/002/004/002/000/002/004/003/000/002/005/003/000" +
    "/002/005/004/000/002/006/003/000/002/006/003/000/002" +
    "/006/003/000/002/006/003/000/002/006/003/000/002/007" +
    "/007/000/002/010/010/000/002/011/003/000/002/011/005" +
    "/000/002/012/003/000/002/012/005/000/002/013/010/000" +
    "/002/014/014/000/002/015/003/000/002/015/004/000/002" +
    "/016/005/000/002/016/007/000/002/016/006/000/002/017" +
    "/005/000/002/022/012/000/002/023/003/000/002/023/004" +
    "/000/002/024/012/000/002/025/003/000/002/025/004/000" +
    "/002/026/012/000/002/027/002/000/002/027/003/000/002" +
    "/027/003/000/002/030/003/000/002/030/004/000/002/030" +
    "/005/000/002/030/006/000/002/031/003/000/002/031/003" +
    "/000/002/032/003/000/002/032/003/000/002/032/004/000" +
    "/002/033/003/000/002/033/003/000/002/033/003/000/002" +
    "/033/003/000/002/033/003/000/002/033/003/000/002/033" +
    "/004/000/002/033/004/000/002/033/004/000/002/034/004" +
    "/000/002/034/005/000/002/035/007/000/002/035/007/000" +
    "/002/035/006/000/002/035/007/000/002/035/006/000/002" +
    "/035/004/000/002/035/007/000/002/035/007/000/002/035" +
    "/006/000/002/035/005/000/002/035/003/000/002/036/003" +
    "/000/002/036/004/000/002/036/003/000/002/036/004/000" +
    "/002/036/005/000/002/036/003/000/002/036/003/000/002" +
    "/036/004/000/002/036/003/000/002/036/003/000/002/036" +
    "/003/000/002/036/004/000/002/036/005/000/002/036/004" +
    "/000/002/036/003/000/002/036/003/000/002/036/004/000" +
    "/002/036/004/000/002/036/005/000/002/036/003/000/002" +
    "/037/003/000/002/037/003" });

  /** Access to production table. */
  public override short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static readonly short[][] _action_table = 
    unpackFromStrings(new string[] {
    "/000/251/000/020/002/ufffb/021/ufffb/023/014/024/012/046" +
    "/017/051/020/052/015/001/002/000/020/002/ufff9/021/ufff9" +
    "/023/ufff9/024/ufff9/046/ufff9/051/ufff9/052/ufff9/001/002/000" +
    "/020/002/ufff6/021/ufff6/023/ufff6/024/ufff6/046/ufff6/051/ufff6" +
    "/052/ufff6/001/002/000/020/002/ufffa/021/ufffa/023/014/024" +
    "/012/046/017/051/020/052/015/001/002/000/020/002/ufff5" +
    "/021/ufff5/023/ufff5/024/ufff5/046/ufff5/051/ufff5/052/ufff5/001" +
    "/002/000/004/002/252/001/002/000/020/002/ufff7/021/ufff7" +
    "/023/ufff7/024/ufff7/046/ufff7/051/ufff7/052/ufff7/001/002/000" +
    "/054/030/025/031/026/032/054/033/030/034/031/035/027" +
    "/036/046/037/043/040/032/041/051/042/042/043/037/044" +
    "/034/045/052/046/033/047/044/050/040/051/045/052/036" +
    "/053/053/055/047/001/002/000/006/002/uffff/021/174/001" +
    "/002/000/004/055/167/001/002/000/004/055/143/001/002" +
    "/000/020/002/ufff3/021/ufff3/023/ufff3/024/ufff3/046/ufff3/051" +
    "/ufff3/052/ufff3/001/002/000/004/055/130/001/002/000/004" +
    "/055/022/001/002/000/020/002/ufff4/021/ufff4/023/ufff4/024" +
    "/ufff4/046/ufff4/051/ufff4/052/ufff4/001/002/000/004/013/023" +
    "/001/002/000/054/030/025/031/026/032/054/033/030/034" +
    "/031/035/027/036/046/037/043/040/032/041/051/042/042" +
    "/043/037/044/034/045/052/046/033/047/044/050/040/051" +
    "/045/052/036/053/053/055/047/001/002/000/006/010/117" +
    "/055/116/001/002/000/006/004/uffbc/012/uffbc/001/002/000" +
    "/012/005/uffb6/010/uffb6/012/uffb6/055/uffb6/001/002/000/012" +
    "/005/uffb2/010/uffb2/012/uffb2/055/uffb2/001/002/000/012/005" +
    "/uffb9/010/uffb9/012/uffb9/055/uffb9/001/002/000/012/005/uffb5" +
    "/010/uffb5/012/uffb5/055/uffb5/001/002/000/014/005/uffac/010" +
    "/uffac/012/uffac/034/115/055/uffac/001/002/000/004/055/114" +
    "/001/002/000/012/005/uffcc/010/uffcc/012/uffcc/055/uffcc/001" +
    "/002/000/056/014/110/030/025/031/026/032/054/033/030" +
    "/034/031/035/027/036/046/037/043/040/032/041/051/042" +
    "/042/043/037/044/034/045/052/046/033/047/044/050/040" +
    "/051/045/052/036/053/053/055/047/001/002/000/004/055" +
    "/107/001/002/000/012/005/uffcd/010/uffcd/012/uffcd/055/uffcd" +
    "/001/002/000/004/055/102/001/002/000/004/004/101/001" +
    "/002/000/012/005/uffce/010/uffce/012/uffce/055/uffce/001/002" +
    "/000/012/005/uffad/010/uffad/012/uffad/055/uffad/001/002/000" +
    "/004/055/067/001/002/000/004/055/066/001/002/000/014" +
    "/005/uffb3/010/uffb3/012/uffb3/034/065/055/uffb3/001/002/000" +
    "/006/010/uffd1/055/uffd1/001/002/000/012/005/uffcf/010/uffcf" +
    "/012/uffcf/055/uffcf/001/002/000/012/005/uffa8/010/uffa8/012" +
    "/uffa8/055/uffa8/001/002/000/012/005/uffd0/010/uffd0/012/uffd0" +
    "/055/uffd0/001/002/000/022/005/uffb1/010/uffb1/012/uffb1/032" +
    "/056/034/057/036/060/040/061/055/uffb1/001/002/000/014" +
    "/005/uffbb/010/uffbb/012/uffbb/034/055/055/uffbb/001/002/000" +
    "/012/005/uffba/010/uffba/012/uffba/055/uffba/001/002/000/014" +
    "/005/uffb8/010/uffb8/012/uffb8/034/064/055/uffb8/001/002/000" +
    "/012/005/uffb0/010/uffb0/012/uffb0/055/uffb0/001/002/000/014" +
    "/005/uffae/010/uffae/012/uffae/034/063/055/uffae/001/002/000" +
    "/014/005/uffaa/010/uffaa/012/uffaa/034/062/055/uffaa/001/002" +
    "/000/012/005/uffa9/010/uffa9/012/uffa9/055/uffa9/001/002/000" +
    "/012/005/uffaf/010/uffaf/012/uffaf/055/uffaf/001/002/000/012" +
    "/005/uffb7/010/uffb7/012/uffb7/055/uffb7/001/002/000/012/005" +
    "/uffb4/010/uffb4/012/uffb4/055/uffb4/001/002/000/012/005/uffca" +
    "/010/uffca/012/uffca/055/uffca/001/002/000/006/015/071/017" +
    "/070/001/002/000/010/020/077/054/073/055/074/001/002" +
    "/000/006/054/073/055/074/001/002/000/004/016/075/001" +
    "/002/000/016/004/uffa7/005/uffa7/006/uffa7/014/uffa7/016/uffa7" +
    "/020/uffa7/001/002/000/016/004/uffa6/005/uffa6/006/uffa6/014" +
    "/uffa6/016/uffa6/020/uffa6/001/002/000/006/004/uffc6/012/uffc6" +
    "/001/002/000/004/020/100/001/002/000/006/004/uffc4/012" +
    "/uffc4/001/002/000/006/004/uffc5/012/uffc5/001/002/000/056" +
    "/014/uffc8/030/uffc8/031/uffc8/032/uffc8/033/uffc8/034/uffc8/035" +
    "/uffc8/036/uffc8/037/uffc8/040/uffc8/041/uffc8/042/uffc8/043/uffc8" +
    "/044/uffc8/045/uffc8/046/uffc8/047/uffc8/050/uffc8/051/uffc8/052" +
    "/uffc8/053/uffc8/055/uffc8/001/002/000/004/017/103/001/002" +
    "/000/010/020/105/054/073/055/074/001/002/000/004/020" +
    "/106/001/002/000/006/004/uffc2/012/uffc2/001/002/000/006" +
    "/004/uffc3/012/uffc3/001/002/000/012/005/uffc9/010/uffc9/012" +
    "/uffc9/055/uffc9/001/002/000/004/004/113/001/002/000/004" +
    "/004/112/001/002/000/056/014/uffc7/030/uffc7/031/uffc7/032" +
    "/uffc7/033/uffc7/034/uffc7/035/uffc7/036/uffc7/037/uffc7/040/uffc7" +
    "/041/uffc7/042/uffc7/043/uffc7/044/uffc7/045/uffc7/046/uffc7/047" +
    "/uffc7/050/uffc7/051/uffc7/052/uffc7/053/uffc7/055/uffc7/001/002" +
    "/000/020/002/uffec/021/uffec/023/uffec/024/uffec/046/uffec/051" +
    "/uffec/052/uffec/001/002/000/012/005/uffcb/010/uffcb/012/uffcb" +
    "/055/uffcb/001/002/000/012/005/uffab/010/uffab/012/uffab/055" +
    "/uffab/001/002/000/012/004/uffc1/012/uffc1/015/122/017/121" +
    "/001/002/000/004/055/120/001/002/000/006/004/uffbd/012" +
    "/uffbd/001/002/000/010/020/126/054/073/055/074/001/002" +
    "/000/006/054/073/055/074/001/002/000/004/016/124/001" +
    "/002/000/006/004/uffc0/012/uffc0/001/002/000/004/020/127" +
    "/001/002/000/006/004/uffbe/012/uffbe/001/002/000/006/004" +
    "/uffbf/012/uffbf/001/002/000/004/013/131/001/002/000/004" +
    "/055/133/001/002/000/006/005/ufff0/014/ufff0/001/002/000" +
    "/010/005/uffee/007/141/014/uffee/001/002/000/006/005/135" +
    "/014/136/001/002/000/004/055/133/001/002/000/004/004" +
    "/137/001/002/000/020/002/ufff1/021/ufff1/023/ufff1/024/ufff1" +
    "/046/ufff1/051/ufff1/052/ufff1/001/002/000/006/005/uffef/014" +
    "/uffef/001/002/000/006/054/073/055/074/001/002/000/006" +
    "/005/uffed/014/uffed/001/002/000/004/025/144/001/002/000" +
    "/004/011/145/001/002/000/054/030/025/031/026/032/054" +
    "/033/030/034/031/035/027/036/046/037/043/040/032/041" +
    "/051/042/042/043/037/044/034/045/052/046/033/047/044" +
    "/050/040/051/045/052/036/053/053/055/047/001/002/000" +
    "/004/012/147/001/002/000/004/013/150/001/002/000/006" +
    "/026/153/027/154/001/002/000/010/014/165/026/153/027" +
    "/154/001/002/000/010/014/uffea/026/uffea/027/uffea/001/002" +
    "/000/006/054/073/055/074/001/002/000/004/006/155/001" +
    "/002/000/054/030/025/031/026/032/054/033/030/034/031" +
    "/035/027/036/046/037/043/040/032/041/051/042/042/043" +
    "/037/044/034/045/052/046/033/047/044/050/040/051/045" +
    "/052/036/053/053/055/047/001/002/000/004/004/157/001" +
    "/002/000/010/014/uffe6/026/uffe6/027/uffe6/001/002/000/004" +
    "/006/161/001/002/000/062/014/uffe8/026/uffe8/027/uffe8/030" +
    "/025/031/026/032/054/033/030/034/031/035/027/036/046" +
    "/037/043/040/032/041/051/042/042/043/037/044/034/045" +
    "/052/046/033/047/044/050/040/051/045/052/036/053/053" +
    "/055/047/001/002/000/004/004/163/001/002/000/010/014" +
    "/uffe7/026/uffe7/027/uffe7/001/002/000/010/014/uffe9/026/uffe9" +
    "/027/uffe9/001/002/000/004/004/166/001/002/000/020/002" +
    "/uffeb/021/uffeb/023/uffeb/024/uffeb/046/uffeb/051/uffeb/052/uffeb" +
    "/001/002/000/004/007/170/001/002/000/006/054/073/055" +
    "/074/001/002/000/004/004/172/001/002/000/020/002/ufff2" +
    "/021/ufff2/023/ufff2/024/ufff2/046/ufff2/051/ufff2/052/ufff2/001" +
    "/002/000/006/002/ufffe/021/174/001/002/000/004/055/177" +
    "/001/002/000/004/002/000/001/002/000/006/002/ufffd/021" +
    "/ufffd/001/002/000/004/013/200/001/002/000/004/022/203" +
    "/001/002/000/006/014/242/022/203/001/002/000/006/014" +
    "/uffe3/022/uffe3/001/002/000/004/055/204/001/002/000/004" +
    "/013/205/001/002/000/052/030/207/031/026/032/054/033" +
    "/030/034/031/035/027/036/046/037/043/040/032/041/051" +
    "/042/042/043/037/044/034/045/052/046/033/050/211/051" +
    "/045/052/036/053/053/055/212/001/002/000/010/005/uffd3" +
    "/012/uffd3/055/uffd3/001/002/000/004/055/uffd6/001/002/000" +
    "/004/055/224/001/002/000/010/005/uffd4/012/uffd4/055/uffd4" +
    "/001/002/000/012/005/uffd1/010/223/012/uffd1/055/uffd1/001" +
    "/002/000/004/055/uffd5/001/002/000/054/014/216/030/207" +
    "/031/026/032/054/033/030/034/031/035/027/036/046/037" +
    "/043/040/032/041/051/042/042/043/037/044/034/045/052" +
    "/046/033/050/211/051/045/052/036/053/053/055/212/001" +
    "/002/000/054/014/uffe0/030/uffe0/031/uffe0/032/uffe0/033/uffe0" +
    "/034/uffe0/035/uffe0/036/uffe0/037/uffe0/040/uffe0/041/uffe0/042" +
    "/uffe0/043/uffe0/044/uffe0/045/uffe0/046/uffe0/050/uffe0/051/uffe0" +
    "/052/uffe0/053/uffe0/055/uffe0/001/002/000/004/007/220/001" +
    "/002/000/054/014/uffdf/030/uffdf/031/uffdf/032/uffdf/033/uffdf" +
    "/034/uffdf/035/uffdf/036/uffdf/037/uffdf/040/uffdf/041/uffdf/042" +
    "/uffdf/043/uffdf/044/uffdf/045/uffdf/046/uffdf/050/uffdf/051/uffdf" +
    "/052/uffdf/053/uffdf/055/uffdf/001/002/000/006/054/073/055" +
    "/074/001/002/000/004/004/222/001/002/000/006/014/uffe1" +
    "/022/uffe1/001/002/000/010/005/uffd2/012/uffd2/055/uffd2/001" +
    "/002/000/004/011/225/001/002/000/056/005/uffdd/012/uffdd" +
    "/030/226/031/026/032/054/033/030/034/031/035/027/036" +
    "/046/037/043/040/032/041/051/042/042/043/037/044/034" +
    "/045/052/046/033/050/211/051/045/052/036/053/053/055" +
    "/212/001/002/000/006/005/uffdc/012/uffdc/001/002/000/006" +
    "/005/233/012/234/001/002/000/010/005/uffda/012/uffda/055" +
    "/232/001/002/000/006/005/uffdb/012/uffdb/001/002/000/006" +
    "/005/uffd9/012/uffd9/001/002/000/050/031/026/032/054/033" +
    "/030/034/031/035/027/036/046/037/043/040/032/041/051" +
    "/042/042/043/037/044/034/045/052/046/033/050/211/051" +
    "/045/052/036/053/053/055/212/001/002/000/004/007/235" +
    "/001/002/000/006/054/073/055/074/001/002/000/004/004" +
    "/237/001/002/000/054/014/uffde/030/uffde/031/uffde/032/uffde" +
    "/033/uffde/034/uffde/035/uffde/036/uffde/037/uffde/040/uffde/041" +
    "/uffde/042/uffde/043/uffde/044/uffde/045/uffde/046/uffde/050/uffde" +
    "/051/uffde/052/uffde/053/uffde/055/uffde/001/002/000/010/005" +
    "/uffd8/012/uffd8/055/241/001/002/000/006/005/uffd7/012/uffd7" +
    "/001/002/000/004/007/244/001/002/000/006/014/uffe2/022" +
    "/uffe2/001/002/000/006/054/073/055/074/001/002/000/004" +
    "/004/246/001/002/000/006/002/uffe4/021/uffe4/001/002/000" +
    "/006/002/ufffc/021/ufffc/001/002/000/004/004/251/001/002" +
    "/000/020/002/uffe5/021/uffe5/023/uffe5/024/uffe5/046/uffe5/051" +
    "/uffe5/052/uffe5/001/002/000/004/002/001/001/002/000/020" +
    "/002/ufff8/021/ufff8/023/ufff8/024/ufff8/046/ufff8/051/ufff8/052" +
    "/ufff8/001/002" });

  /** Access to parse-action table. */
  public override short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static readonly short[][] _reduce_table = 
    unpackFromStrings(new string[] {
    "/000/251/000/024/003/007/004/012/005/005/006/003/007" +
    "/010/010/004/013/006/014/020/017/015/001/001/000/002" +
    "/001/001/000/002/001/001/000/016/006/252/007/010/010" +
    "/004/013/006/014/020/017/015/001/001/000/002/001/001" +
    "/000/002/001/001/000/002/001/001/000/010/033/023/035" +
    "/247/036/047/001/001/000/010/020/172/021/174/022/175" +
    "/001/001/000/002/001/001/000/002/001/001/000/002/001" +
    "/001/000/002/001/001/000/002/001/001/000/002/001/001" +
    "/000/002/001/001/000/012/033/023/034/034/035/040/036" +
    "/047/001/001/000/002/001/001/000/002/001/001/000/002" +
    "/001/001/000/002/001/001/000/002/001/001/000/002/001" +
    "/001/000/002/001/001/000/002/001/001/000/002/001/001" +
    "/000/010/033/023/035/110/036/047/001/001/000/002/001" +
    "/001/000/002/001/001/000/002/001/001/000/002/001/001" +
    "/000/002/001/001/000/002/001/001/000/002/001/001/000" +
    "/002/001/001/000/002/001/001/000/002/001/001/000/002" +
    "/001/001/000/002/001/001/000/002/001/001/000/002/001" +
    "/001/000/002/001/001/000/002/001/001/000/002/001/001" +
    "/000/002/001/001/000/002/001/001/000/002/001/001/000" +
    "/002/001/001/000/002/001/001/000/002/001/001/000/002" +
    "/001/001/000/002/001/001/000/002/001/001/000/004/037" +
    "/075/001/001/000/004/037/071/001/001/000/002/001/001" +
    "/000/002/001/001/000/002/001/001/000/002/001/001/000" +
    "/002/001/001/000/002/001/001/000/002/001/001/000/002" +
    "/001/001/000/002/001/001/000/004/037/103/001/001/000" +
    "/002/001/001/000/002/001/001/000/002/001/001/000/002" +
    "/001/001/000/002/001/001/000/002/001/001/000/002/001" +
    "/001/000/002/001/001/000/002/001/001/000/002/001/001" +
    "/000/002/001/001/000/002/001/001/000/002/001/001/000" +
    "/004/037/124/001/001/000/004/037/122/001/001/000/002" +
    "/001/001/000/002/001/001/000/002/001/001/000/002/001" +
    "/001/000/002/001/001/000/002/001/001/000/006/011/133" +
    "/012/131/001/001/000/002/001/001/000/002/001/001/000" +
    "/002/001/001/000/004/012/137/001/001/000/002/001/001" +
    "/000/002/001/001/000/002/001/001/000/004/037/141/001" +
    "/001/000/002/001/001/000/002/001/001/000/002/001/001" +
    "/000/010/033/023/035/145/036/047/001/001/000/002/001" +
    "/001/000/002/001/001/000/006/015/150/016/151/001/001" +
    "/000/004/016/163/001/001/000/002/001/001/000/004/037" +
    "/157/001/001/000/002/001/001/000/010/033/023/035/155" +
    "/036/047/001/001/000/002/001/001/000/002/001/001/000" +
    "/002/001/001/000/010/033/023/035/161/036/047/001/001" +
    "/000/002/001/001/000/002/001/001/000/002/001/001/000" +
    "/002/001/001/000/002/001/001/000/002/001/001/000/004" +
    "/037/170/001/001/000/002/001/001/000/002/001/001/000" +
    "/004/022/246/001/001/000/002/001/001/000/002/001/001" +
    "/000/002/001/001/000/002/001/001/000/006/023/200/024" +
    "/201/001/001/000/004/024/242/001/001/000/002/001/001" +
    "/000/002/001/001/000/002/001/001/000/016/025/213/026" +
    "/214/031/207/032/212/033/205/036/047/001/001/000/002" +
    "/001/001/000/002/001/001/000/002/001/001/000/002/001" +
    "/001/000/002/001/001/000/002/001/001/000/014/026/216" +
    "/031/207/032/212/033/205/036/047/001/001/000/002/001" +
    "/001/000/002/001/001/000/002/001/001/000/004/037/220" +
    "/001/001/000/002/001/001/000/002/001/001/000/002/001" +
    "/001/000/002/001/001/000/014/027/226/030/230/032/227" +
    "/033/205/036/047/001/001/000/002/001/001/000/002/001" +
    "/001/000/002/001/001/000/002/001/001/000/002/001/001" +
    "/000/010/032/237/033/205/036/047/001/001/000/002/001" +
    "/001/000/004/037/235/001/001/000/002/001/001/000/002" +
    "/001/001/000/002/001/001/000/002/001/001/000/002/001" +
    "/001/000/002/001/001/000/004/037/244/001/001/000/002" +
    "/001/001/000/002/001/001/000/002/001/001/000/002/001" +
    "/001/000/002/001/001/000/002/001/001/000/002/001/001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public override short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP_Parser_actions action_obj;

  /** Action encapsulation object initializer. */
  protected override void init_actions()
    {
      action_obj = new CUP_Parser_actions(this);
    }

  /** Invoke a user supplied parse action. */
  public override TUVienna.CS_CUP.Runtime.Symbol do_action(
    int                        act_num,
    TUVienna.CS_CUP.Runtime.lr_parser parser,
    System.Collections.Stack            xstack1,
    int                        top)
  {
  mStack CUP_parser_stack= new mStack(xstack1);
    /* call code in generated class */
    return action_obj.CUP_Parser_do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public override int start_state() {return 0;}
  /** Indicates start production. */
  public override int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public override int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public override int error_sym() {return 1;}



    public void ReportError(string message, object info)
    {
        var msg = new StringBuilder("CsRpcGen: error");
        if (info is Symbol symbol)
        {
            msg.Append(" in line ");
            msg.Append(symbol.left);
        }

        msg.Append(": ");
        msg.Append(message);
        Console.WriteLine(msg);
        throw new ParserException();
    }

    public void ReportError(string message, int line)
    {
        var msg = new StringBuilder("CsRpcGen: error in line ");
        msg.Append(line);
        msg.Append(": ");
        msg.Append(message);
        Console.WriteLine(msg);
        throw new ParserException();
    }

    public void SyntaxError(Symbol cur_token)
    {
        var msg = new StringBuilder("CsRpcGen: syntax error in line ");
        msg.Append(cur_token.left);
        Console.WriteLine(msg);
        throw new ParserException();
    }

    public void ReportFatalError(string message, object info)
    {
        ReportError(message, info);
        throw new ParserException("Fatal Syntax Error");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
public class CUP_Parser_actions {
  private Parser my_parser;

  /** Constructor */
  public CUP_Parser_actions(Parser t_parser) {
    this.my_parser = t_parser;
  }

  /** Method with the actual generated action code. */
  public   TUVienna.CS_CUP.Runtime.Symbol CUP_Parser_do_action(
    int                        CUP_Parser_act_num,
    TUVienna.CS_CUP.Runtime.lr_parser CUP_Parser_parser,
    System.Collections.Stack            xstack1,
    int                        CUP_Parser_top)
    {
      /* Symbol object for return from actions */
      mStack CUP_Parser_stack =new mStack(xstack1);
      TUVienna.CS_CUP.Runtime.Symbol CUP_Parser_result;

      /* select the action based on the action number */
      switch (CUP_Parser_act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // value ::= IDENTIFIER 
            {
              string RESULT = null;
		int idleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int idright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string id = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 RESULT = id; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(29/*value*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // value ::= INTEGER_LITERAL 
            {
              string RESULT = null;
		int litleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int litright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string lit = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 RESULT = lit; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(29/*value*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // int_types ::= UHYPER 
            {
              string RESULT = null;
		 RESULT = "ulong"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(28/*int_types*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // int_types ::= UNSIGNED HYPER INT 
            {
              string RESULT = null;
		 RESULT = "ulong"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(28/*int_types*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // int_types ::= UNSIGNED HYPER 
            {
              string RESULT = null;
		 RESULT = "ulong"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(28/*int_types*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // int_types ::= HYPER INT 
            {
              string RESULT = null;
		 RESULT = "long"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(28/*int_types*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // int_types ::= HYPER 
            {
              string RESULT = null;
		 RESULT = "long"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(28/*int_types*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // int_types ::= ULONG 
            {
              string RESULT = null;
		 RESULT = "uint"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(28/*int_types*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // int_types ::= UNSIGNED LONG 
            {
              string RESULT = null;
		 RESULT = "uint"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(28/*int_types*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // int_types ::= UNSIGNED LONG INT 
            {
              string RESULT = null;
		 RESULT = "uint"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(28/*int_types*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // int_types ::= UNSIGNED INT 
            {
              string RESULT = null;
		 RESULT = "uint"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(28/*int_types*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // int_types ::= UNSIGNED 
            {
              string RESULT = null;
		 RESULT = "uint"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(28/*int_types*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // int_types ::= UINT 
            {
              string RESULT = null;
		 RESULT = "uint"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(28/*int_types*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // int_types ::= LONG 
            {
              string RESULT = null;
		 RESULT = "int"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(28/*int_types*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // int_types ::= LONG INT 
            {
              string RESULT = null;
		 RESULT = "int"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(28/*int_types*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // int_types ::= INT 
            {
              string RESULT = null;
		 RESULT = "int"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(28/*int_types*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // int_types ::= CHAR 
            {
              string RESULT = null;
		 RESULT = "byte"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(28/*int_types*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // int_types ::= UNSIGNED SHORT INT 
            {
              string RESULT = null;
		 RESULT = "ushort"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(28/*int_types*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // int_types ::= UNSIGNED SHORT 
            {
              string RESULT = null;
		 RESULT = "ushort"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(28/*int_types*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // int_types ::= USHORT 
            {
              string RESULT = null;
		 RESULT = "ushort"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(28/*int_types*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // int_types ::= SHORT INT 
            {
              string RESULT = null;
		 RESULT = "short"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(28/*int_types*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // int_types ::= SHORT 
            {
              string RESULT = null;
		 RESULT = "short"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(28/*int_types*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declaration ::= VOID 
            {
              ParsedDeclaration RESULT = null;
		
            RESULT = new ParsedDeclaration(null, "void");
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(27/*declaration*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaration ::= type_specifier STAR IDENTIFIER 
            {
              ParsedDeclaration RESULT = null;
		int typeleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left;
		int typeright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).right;
		string type = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-2)).value;
		int idleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int idright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string id = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		
            RESULT = new ParsedDeclaration(id, type, DeclarationType.Indirection);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(27/*declaration*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaration ::= type_specifier IDENTIFIER LANGLE RANGLE 
            {
              ParsedDeclaration RESULT = null;
		int typeleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).left;
		int typeright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).right;
		string type = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-3)).value;
		int idleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left;
		int idright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).right;
		string id = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-2)).value;
		
            RESULT = new ParsedDeclaration(id, type, DeclarationType.DynamicVector);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(27/*declaration*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaration ::= type_specifier IDENTIFIER LANGLE value RANGLE 
            {
              ParsedDeclaration RESULT = null;
		int typeleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-4)).left;
		int typeright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-4)).right;
		string type = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-4)).value;
		int idleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).left;
		int idright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).right;
		string id = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-3)).value;
		int sizeleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int sizeright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		string size = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		
            RESULT = new ParsedDeclaration(id, type, DeclarationType.DynamicVector, size);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(27/*declaration*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-4)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaration ::= type_specifier IDENTIFIER LBRACKET value RBRACKET 
            {
              ParsedDeclaration RESULT = null;
		int typeleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-4)).left;
		int typeright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-4)).right;
		string type = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-4)).value;
		int idleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).left;
		int idright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).right;
		string id = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-3)).value;
		int sizeleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int sizeright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		string size = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		
            RESULT = new ParsedDeclaration(id, type, DeclarationType.FixedVector, size);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(27/*declaration*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-4)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaration ::= type_specifier IDENTIFIER 
            {
              ParsedDeclaration RESULT = null;
		int typeleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int typeright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		string type = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		int idleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int idright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string id = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		
            RESULT = new ParsedDeclaration(id, type);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(27/*declaration*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaration ::= STRING IDENTIFIER LANGLE RANGLE 
            {
              ParsedDeclaration RESULT = null;
		int idleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left;
		int idright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).right;
		string id = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-2)).value;
		
            RESULT = new ParsedDeclaration(id, "string", DeclarationType.DynamicVector);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(27/*declaration*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaration ::= STRING IDENTIFIER LANGLE value RANGLE 
            {
              ParsedDeclaration RESULT = null;
		int idleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).left;
		int idright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).right;
		string id = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-3)).value;
		int sizeleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int sizeright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		string size = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		
            RESULT = new ParsedDeclaration(id, "string", DeclarationType.DynamicVector, size);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(27/*declaration*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-4)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaration ::= OPAQUE IDENTIFIER LANGLE RANGLE 
            {
              ParsedDeclaration RESULT = null;
		int idleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left;
		int idright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).right;
		string id = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-2)).value;
		
            RESULT = new ParsedDeclaration(id, "opaque", DeclarationType.DynamicVector);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(27/*declaration*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaration ::= OPAQUE IDENTIFIER LANGLE value RANGLE 
            {
              ParsedDeclaration RESULT = null;
		int idleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).left;
		int idright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).right;
		string id = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-3)).value;
		int sizeleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int sizeright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		string size = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		
            RESULT = new ParsedDeclaration(id, "opaque", DeclarationType.DynamicVector, size);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(27/*declaration*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-4)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaration ::= OPAQUE IDENTIFIER LBRACKET value RBRACKET 
            {
              ParsedDeclaration RESULT = null;
		int idleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).left;
		int idright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).right;
		string id = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-3)).value;
		int sizeleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int sizeright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		string size = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		
            RESULT = new ParsedDeclaration(id, "opaque", DeclarationType.FixedVector, size);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(27/*declaration*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-4)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declarations ::= declarations declaration SEMICOLON 
            {
              ArrayList RESULT = null;
		int declsleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left;
		int declsright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).right;
		ArrayList decls = (ArrayList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-2)).value;
		int declleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int declright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		ParsedDeclaration decl = (ParsedDeclaration)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		
            decls.Add(decl);
            RESULT = decls;
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(26/*declarations*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declarations ::= declaration SEMICOLON 
            {
              ArrayList RESULT = null;
		int declleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int declright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		ParsedDeclaration decl = (ParsedDeclaration)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		
            RESULT = new ArrayList();
            RESULT.Add(decl);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(26/*declarations*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type_specifier ::= UNION IDENTIFIER 
            {
              string RESULT = null;
		int idleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int idright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string id = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 RESULT = id; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(25/*type_specifier*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type_specifier ::= STRUCT IDENTIFIER 
            {
              string RESULT = null;
		int idleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int idright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string id = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 RESULT = id; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(25/*type_specifier*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type_specifier ::= ENUM IDENTIFIER 
            {
              string RESULT = null;
		int idleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int idright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string id = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 RESULT = id; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(25/*type_specifier*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type_specifier ::= QUADRUPLE 
            {
		 throw new NotSupportedException("Quadruple is not supported yet."); 
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type_specifier ::= DOUBLE 
            {
              string RESULT = null;
		 RESULT = "double"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(25/*type_specifier*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type_specifier ::= FLOAT 
            {
              string RESULT = null;
		 RESULT = "float"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(25/*type_specifier*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type_specifier ::= int_types 
            {
              string RESULT = null;
		int typeleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int typeright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string type = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 RESULT = type; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(25/*type_specifier*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type_specifier ::= BOOL 
            {
              string RESULT = null;
		 RESULT = "bool"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(25/*type_specifier*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type_specifier ::= IDENTIFIER 
            {
              string RESULT = null;
		int idleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int idright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string id = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 RESULT = id; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(25/*type_specifier*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type_specifier_incl_string ::= IDENTIFIER STAR 
            {
              string RESULT = null;
		int idleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int idright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		string id = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		 RESULT = id; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(24/*type_specifier_incl_string*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type_specifier_incl_string ::= type_specifier 
            {
              string RESULT = null;
		int typeleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int typeright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string type = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 RESULT = type; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(24/*type_specifier_incl_string*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type_specifier_incl_string ::= STRING 
            {
              string RESULT = null;
		 RESULT = "string"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(24/*type_specifier_incl_string*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type_specifier_incl_specials ::= type_specifier_incl_string 
            {
              string RESULT = null;
		int typeleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int typeright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string type = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 RESULT = type; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(23/*type_specifier_incl_specials*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type_specifier_incl_specials ::= VOID 
            {
              string RESULT = null;
		 RESULT = "void"; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(23/*type_specifier_incl_specials*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // argument_list_no_void ::= argument_list COMMA type_specifier_incl_string IDENTIFIER 
            {
              ArrayList RESULT = null;
		int argsleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).left;
		int argsright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).right;
		ArrayList args = (ArrayList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-3)).value;
		int paramTypeleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int paramTyperight = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		string paramType = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		int paramNameleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int paramNameright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string paramName = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		
            RESULT = args;
            RESULT.Add(new ParsedDeclaration(paramName, paramType));
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(22/*argument_list_no_void*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // argument_list_no_void ::= argument_list COMMA type_specifier_incl_string 
            {
              ArrayList RESULT = null;
		int argsleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left;
		int argsright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).right;
		ArrayList args = (ArrayList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-2)).value;
		int paramTypeleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int paramTyperight = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string paramType = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		
            RESULT = args;
            RESULT.Add(new ParsedDeclaration(null, paramType));
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(22/*argument_list_no_void*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // argument_list_no_void ::= type_specifier_incl_string IDENTIFIER 
            {
              ArrayList RESULT = null;
		int paramTypeleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int paramTyperight = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		string paramType = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		int paramNameleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int paramNameright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string paramName = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		
            RESULT = new ArrayList();
            RESULT.Add(new ParsedDeclaration(paramName, paramType));
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(22/*argument_list_no_void*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // argument_list_no_void ::= type_specifier_incl_string 
            {
              ArrayList RESULT = null;
		int paramTypeleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int paramTyperight = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string paramType = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		
            RESULT = new ArrayList();
            RESULT.Add(new ParsedDeclaration(null, paramType));
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(22/*argument_list_no_void*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // argument_list ::= argument_list_no_void 
            {
              ArrayList RESULT = null;
		int argsleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int argsright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		ArrayList args = (ArrayList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		
            RESULT = args; // just pass through
            int size = RESULT.Count;
            // All arguments, which are unnamed so far will now get default names.
            for (int idx = 0; idx < size; idx++)
            {
                var paraminfo = (ParsedDeclaration)RESULT[idx];
                if (paraminfo.Identifier == null)
                {
                    paraminfo.Identifier = "arg" + (idx + 1);
                }
            }
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(21/*argument_list*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // argument_list ::= VOID 
            {
              ArrayList RESULT = null;
		
            RESULT = null;
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(21/*argument_list*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // argument_list ::= 
            {
              ArrayList RESULT = null;
		
            RESULT = null;
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(21/*argument_list*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procedure_def ::= type_specifier_incl_specials IDENTIFIER LPAREN argument_list RPAREN EQUAL value SEMICOLON 
            {
              ParsedProcedureInfo RESULT = null;
		int resultTypeleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-7)).left;
		int resultTyperight = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-7)).right;
		string resultType = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-7)).value;
		int procIdleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-6)).left;
		int procIdright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-6)).right;
		string procId = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-6)).value;
		int argsleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-4)).left;
		int argsright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-4)).right;
		ArrayList args = (ArrayList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-4)).value;
		int procNumberleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int procNumberright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		string procNumber = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		
            RESULT = new ParsedProcedureInfo(procId, procNumber, resultType, args);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(20/*procedure_def*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-7)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // procedure_defs ::= procedure_defs procedure_def 
            {
              ArrayList RESULT = null;
		int procsleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int procsright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		ArrayList procs = (ArrayList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		int procleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int procright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		ParsedProcedureInfo proc = (ParsedProcedureInfo)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		
            procs.Add(proc);
            RESULT = procs;
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(19/*procedure_defs*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // procedure_defs ::= procedure_def 
            {
              ArrayList RESULT = null;
		int procleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int procright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		ParsedProcedureInfo proc = (ParsedProcedureInfo)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		
            RESULT = new ArrayList();
            RESULT.Add(proc);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(19/*procedure_defs*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // version_def ::= VERSION IDENTIFIER LBRACE procedure_defs RBRACE EQUAL value SEMICOLON 
            {
              ParsedVersionInfo RESULT = null;
		int versIdleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-6)).left;
		int versIdright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-6)).right;
		string versId = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-6)).value;
		int procsleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-4)).left;
		int procsright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-4)).right;
		ArrayList procs = (ArrayList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-4)).value;
		int versNumberleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int versNumberright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		string versNumber = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		
            var vers = new ParsedConst(versId, versNumber, Program.BaseClassname);
            RESULT = new ParsedVersionInfo(versId, versNumber, procs);
            Program.AddElement(versId, vers);
            versNumber = vers.ResolveValue();
            if (versNumber == null)
            {
                my_parser.ReportError("Can not resolve version identifier \"" + versId + "\" to integer literal", versNumberleft);
            }

            // We also need to fix up the procedure identifiers by appending the version number
            int size = procs.Count;
            for (int idx = 0; idx < size; idx++)
            {
                var procInfo = (ParsedProcedureInfo)procs[idx];
                procInfo.ProcedureId += "_" + versNumber;
                var proc = new ParsedConst(procInfo.ProcedureId, procInfo.ProcedureNumber, Program.BaseClassname);
                Program.AddElement(procInfo.ProcedureId, proc);
            }
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(18/*version_def*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-7)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // version_defs ::= version_defs version_def 
            {
              ArrayList RESULT = null;
		int versionsleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int versionsright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		ArrayList versions = (ArrayList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		int versionleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int versionright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		ParsedVersionInfo version = (ParsedVersionInfo)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		
            versions.Add(version);
            RESULT = versions;
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(17/*version_defs*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // version_defs ::= version_def 
            {
              ArrayList RESULT = null;
		int versionleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int versionright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		ParsedVersionInfo version = (ParsedVersionInfo)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		
            RESULT = new ArrayList();
            RESULT.Add(version);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(17/*version_defs*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // program_def ::= PROGRAM IDENTIFIER LBRACE version_defs RBRACE EQUAL value SEMICOLON 
            {
              ParsedProgramInfo RESULT = null;
		int progIdleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-6)).left;
		int progIdright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-6)).right;
		string progId = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-6)).value;
		int versionsleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-4)).left;
		int versionsright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-4)).right;
		ArrayList versions = (ArrayList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-4)).value;
		int progNumberleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int progNumberright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		string progNumber = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		
            var prog = new ParsedConst(progId, progNumber, Program.BaseClassname);
            RESULT = new ParsedProgramInfo(progId, progNumber, versions);
            Program.AddElement(progId, prog);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(16/*program_def*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-7)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // typedef_def ::= TYPEDEF declaration SEMICOLON 
            {
              object RESULT = null;
		int declleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int declright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		ParsedDeclaration decl = (ParsedDeclaration)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		
            Program.AddElement(decl.Identifier, decl);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(13/*typedef_def*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // union_case ::= DEFAULT COLON declaration SEMICOLON 
            {
              ParsedUnionArm RESULT = null;
		int elementleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int elementright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		ParsedDeclaration element = (ParsedDeclaration)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		
            RESULT = new ParsedUnionArm(null, element);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(12/*union_case*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // union_case ::= CASE value COLON declaration SEMICOLON 
            {
              ParsedUnionArm RESULT = null;
		int valleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).left;
		int valright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).right;
		string val = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-3)).value;
		int elementleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int elementright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		ParsedDeclaration element = (ParsedDeclaration)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		
            RESULT = new ParsedUnionArm(val, element);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(12/*union_case*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-4)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // union_case ::= CASE value COLON 
            {
              ParsedUnionArm RESULT = null;
		int valleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int valright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		string val = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		
            RESULT = new ParsedUnionArm(val, null);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(12/*union_case*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // union_cases ::= union_cases union_case 
            {
              ArrayList RESULT = null;
		int armsleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int armsright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		ArrayList arms = (ArrayList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		int armleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int armright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		ParsedUnionArm arm = (ParsedUnionArm)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		
            arms.Add(arm);
            RESULT = arms;
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(11/*union_cases*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // union_cases ::= union_case 
            {
              ArrayList RESULT = null;
		int armleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int armright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		ParsedUnionArm arm = (ParsedUnionArm)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		
            RESULT = new ArrayList();
            RESULT.Add(arm);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(11/*union_cases*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // union_def ::= UNION IDENTIFIER SWITCH LPAREN declaration RPAREN LBRACE union_cases RBRACE SEMICOLON 
            {
              object RESULT = null;
		int idleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-8)).left;
		int idright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-8)).right;
		string id = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-8)).value;
		int descrimleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-5)).left;
		int descrimright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-5)).right;
		ParsedDeclaration descrim = (ParsedDeclaration)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-5)).value;
		int elementsleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left;
		int elementsright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).right;
		ArrayList elements = (ArrayList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-2)).value;
		
            var uni = new ParsedUnion(id, descrim, elements);
            Program.AddElement(id, uni);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(10/*union_def*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-9)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // struct_def ::= STRUCT IDENTIFIER LBRACE declarations RBRACE SEMICOLON 
            {
              object RESULT = null;
		int idleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-4)).left;
		int idright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-4)).right;
		string id = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-4)).value;
		int elementsleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left;
		int elementsright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).right;
		ArrayList elements = (ArrayList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-2)).value;
		
            var @struct = new ParsedStruct(id, elements);
            Program.AddElement(id, @struct);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(9/*struct_def*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-5)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // enum_element ::= IDENTIFIER EQUAL value 
            {
              ParsedConst RESULT = null;
		int idleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left;
		int idright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).right;
		string id = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-2)).value;
		int valleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int valright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string val = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		
            RESULT = new ParsedConst(id, val);
            Program.AddElement(id, RESULT);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(8/*enum_element*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // enum_element ::= IDENTIFIER 
            {
              ParsedConst RESULT = null;
		int idleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int idright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string id = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		
            RESULT = new ParsedConst(id, null);
            Program.AddElement(id, RESULT);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(8/*enum_element*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // enum_elements ::= enum_elements COMMA enum_element 
            {
              ArrayList RESULT = null;
		int elementsleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left;
		int elementsright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).right;
		ArrayList elements = (ArrayList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-2)).value;
		int elleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int elright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		ParsedConst el = (ParsedConst)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		
            // If no specific value has been assigned to this element of
            // an enumeration, increment value of previous element and
            // assign the new value to this element. BTW -- we let the
            // C# compiler do the calculation, so references to
            // other constants by name are valid
            if (el.Value == null)
            {
                el.Value = ((ParsedConst)elements[elements.Count - 1]).Value + "+1";
            }
            elements.Add(el);
            RESULT = elements;
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(7/*enum_elements*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // enum_elements ::= enum_element 
            {
              ArrayList RESULT = null;
		int elleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int elright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		ParsedConst el = (ParsedConst)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		
            // If no specific value has been assigned to this element of an enumeration, assign zero by default
            if (el.Value == null)
            {
                el.Value = "0";
            }
            RESULT = new ArrayList();
            RESULT.Add(el);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(7/*enum_elements*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // enum_def ::= ENUM IDENTIFIER LBRACE enum_elements RBRACE SEMICOLON 
            {
              object RESULT = null;
		int idleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-4)).left;
		int idright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-4)).right;
		string id = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-4)).value;
		int elementsleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left;
		int elementsright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).right;
		ArrayList elements = (ArrayList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-2)).value;
		
            // Fix up enclosure of enumeration elements, so we can later use a full qualified identifier
            int size = elements.Count;
            for (int idx = 0; idx < size; idx++)
            {
                ParsedConst c = (ParsedConst)elements[idx];
                c.Enclosure = id;
            }

            var type = new ParsedEnum(id, elements);
            Program.AddElement(id, type);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(6/*enum_def*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-5)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constant_def ::= CONST IDENTIFIER EQUAL value SEMICOLON 
            {
              object RESULT = null;
		int idleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).left;
		int idright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).right;
		string id = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-3)).value;
		int valueleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int valueright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		string value = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		
            ParsedConst type = new ParsedConst(id, value, Program.BaseClassname);
            Program.AddElement(id, type);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(5/*constant_def*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-4)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // definition ::= typedef_def 
            {
              object RESULT = null;

              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(4/*definition*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // definition ::= union_def 
            {
              object RESULT = null;

              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(4/*definition*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // definition ::= struct_def 
            {
              object RESULT = null;

              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(4/*definition*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // definition ::= enum_def 
            {
              object RESULT = null;

              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(4/*definition*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // definition ::= constant_def 
            {
              object RESULT = null;

              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(4/*definition*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // definitions ::= definitions definition 
            {
              object RESULT = null;

              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(3/*definitions*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definitions ::= definition 
            {
              object RESULT = null;

              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(3/*definitions*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // definitions_opt ::= definitions 
            {
              object RESULT = null;

              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(2/*definitions_opt*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // definitions_opt ::= 
            {
              object RESULT = null;

              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(2/*definitions_opt*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_defs ::= program_defs program_def 
            {
              ArrayList RESULT = null;
		int progDefsleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int progDefsright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		ArrayList progDefs = (ArrayList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		int progDefleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int progDefright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		ParsedProgramInfo progDef = (ParsedProgramInfo)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		
            progDefs.Add(progDef);
            RESULT = progDefs;
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(14/*program_defs*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_defs ::= program_def 
            {
              ArrayList RESULT = null;
		int progDefleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int progDefright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		ParsedProgramInfo progDef = (ParsedProgramInfo)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		
            RESULT = new ArrayList();
            RESULT.Add(progDef);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(14/*program_defs*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_defs_opt ::= program_defs 
            {
              object RESULT = null;
		int progDefsleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int progDefsright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		ArrayList progDefs = (ArrayList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		
            Program.SetProgramInfos(progDefs);
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(15/*program_defs_opt*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_defs_opt ::= 
            {
              object RESULT = null;
		
            Program.SetProgramInfos(new ArrayList());
        
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(15/*program_defs_opt*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // compilation_unit ::= definitions_opt program_defs_opt 
            {
              object RESULT = null;

              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(1/*compilation_unit*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= compilation_unit EOF 
            {
              object RESULT = null;
		int start_valleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int start_valright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		object start_val = (object)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		RESULT = start_val;
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(0/*$START*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP_Parser_parser.done_parsing();
          return CUP_Parser_result;

          /* . . . . . .*/
          default:
            throw new System.Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

}
